<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN"
     [
<!ENTITY figtype "#FIGTYPE#">
<!ENTITY timestamp "#DATE#">
<!ENTITY version "#VERSION#">
<!ENTITY % draft "#DRAFTS#">
]>

<!-- Embbeb your block with these to set it to "draft"
<![%draft;[ <your block> ]]>
-->

<book>

<bookinfo>
	<title>OpenSMPPBox &version; User's Guide</title>
	<subtitle>Open Source SMPP proxy</subtitle>

<authorgroup>
	<author>
		<firstname>Rene</firstname>
		<surname>Kluwen</surname>
		<affiliation>
			<jobtitle>OpenSMPPBox author</jobtitle>
			<orgname>Chimit Ltd.</orgname>
			<address> <email>rene.kluwen@chimit.nl</email>
			</address>
		</affiliation>
	</author>
	<author>
		<firstname>Victor</firstname>
		<surname>Luchitz</surname>
		<affiliation>
			<jobtitle>TLV and other patches</jobtitle>
			<orgname>Playfon</orgname>
			<address><email>vluchits@gmail.com</email></address>
		</affiliation>

	</author>
	<author>
		<firstname>Nikos</firstname>
		<surname>Balkanas</surname>
		<affiliation>
			<jobtitle>Documentation and patches</jobtitle>
			<orgname>InAccess Networks SA</orgname>
			<address>
				<email>nbalkanas@gmail.com</email>
			</address>
		</affiliation>
	</author>
        <author>
                <firstname>Aarno</firstname>
                <surname>Syvanen</surname>
                <affiliation>
                       <jobtitle>Software engineer</jobtitle>
                       <orgname>Alisanus Gmbh</orgname>
                       <address><email>aarno@alisanus.com</email></address>
                </affiliation>
        </author> 
</authorgroup>

	<abstract>
		<title>Abstract</title>
		<para>
			This document describes how to install and use OpenSMPPBox, the Open
			Source SMPP proxy originally developed by Chimit Ltd. and now
			being developed further by the open source community, namely the
			Kannel Group.
		</para>
	</abstract>

	<revhistory>
		<revision>
			<revnumber>&version;</revnumber>
				<date>&timestamp;</date>
			</revision>
	</revhistory>

</bookinfo>

<chapter>
	<title>Introduction</title>

	<para>This chapter introduces SMPP in general terms, and
		explains the role of OpenSMPPBox in SMS flow, outlining its duties
		and features.
	</para>

	<sect1>
		<title>Overview of SMPP</title>

		<para>
			The Short Message Peer to Peer (SMPP) protocol is an open,
			industry standard protocol designed to provide a flexible data
			communications interface for transfer of short message data
			between a Message Center, such as a Short Message Service Centre
			(SMSC), GSM Unstructured Supplementary Services Data (USSD) Server
			or other type of Message Center and a SMS application system, such
			as a WAP Proxy Server, EMail Gateway or other Messaging Gateway.
			It was maintained by the SMS Forum until it reached maturity and
			was subsequently disbanded in July 2007.
		</para>

		<para>
			SMPP Release v3.4, its most popular version, launched in 12/9/1999.
			Now in its latest implementation, v5.0 further development has been
			discontinued since the disband of the SMS Forum. All protocols and
			specifications can still be downloaded from http://www.smsforum.net/.
		</para>

		<para>
			SMPP supports Digital Cellular Network technologies including:
		</para>

		<para>
			<itemizedlist>
				<listitem><para>GSM</para></listitem>
				<listitem><para>IS-95 (CDMA)</para></listitem>
				<listitem><para>ANSI-136 (TDMA)</para></listitem>
				<listitem><para>iDEN</para></listitem>
			</itemizedlist>
		</para>

		<para>
			Using the SMPP protocol, an SMS application system called the
			"External Short Message Entity" (ESME) may initiate an application
			layer connection with an SMSC over a TCP/IP or X.25 network
			connection and may then send short messages and receive short
			messages to and from the SMSC respectively. The ESME may also query,
			cancel or replace short messages using SMPP.
		</para>

		<para>
			SMPP supports a full featured set of two-way messaging functions
			such as:
		</para>

		<para>
			<itemizedlist>
				<listitem>
					<para>Transmit messages from an ESME to single or multiple
						destinations via the SMSC</para>
				</listitem>
				<listitem>
					<para>An ESME may receive messages via the SMSC from other
						SME's (e.g. mobile stations).</para>
				</listitem>
				<listitem>
					<para>Query the status of a short message stored on the
						SMSC</para>
				</listitem>
				<listitem>
					<para>Cancel or replace a short message stored on the
						SMSC</para>
				</listitem>
				<listitem>
					<para>Send a registered short message (for which a "delivery
						receipt" will be returned by the SMSC to the message
						originator)</para>
				</listitem>
				<listitem>
					<para>Schedule the message delivery date and time</para>
				</listitem>
				<listitem>
					<para>Select the message mode, i.e. datagram or store and
						forward</para>
				</listitem>
				<listitem>
					<para>Set the delivery priority of the short message</para>
				</listitem>
				<listitem>
					<para>Define the data coding type of the short message</para>
				</listitem>
				<listitem>
					<para>Set the short message validity period</para>
				</listitem>
				<listitem>
					<para>Associate a service type with each message e.g. voice
						mail notification</para>
				</listitem>
			</itemizedlist>
		</para>
	</sect1>

	<sect1>
		<title>OpenSMPPBox overview</title>

		<para>
			OpenSMPPBox is an opensource SMPP proxy, which forwards GSM SMPP PDUs.
			It is not a pure proxy in the clear sense of the word, since it
			is not limited to the SMPP protocol. It features an SMPP server port
			for incoming ESME connections, but the client side uses the more
			flexible Kannel (Msg *) protocol for connection to Kannel's Bearerbox.
			This way it can take advantage of Bearerbox's client SMSc protocols
			not limited to SMPP, but extending to CIMD2, EMI/UUCP etc. It can be
			used for both MT &amp; MO SMS traffic.
		</para>
		<figure>
			<title>OpenSMPPBox Layout </title>
			<graphic fileref="SMPPBox&figtype;"></graphic>
		</figure>
		<para>
			The ESME connects over SMPP to OpenSMPPBox, thinking that it is an SMSc.
			Accounts are configured in OpenSMPPBox to allow connections only from
			specific clients. The SMS is forwarded to Bearerbox, which routes it
			to the best available SMSc over a variety of protocols.
		</para>
		<para>
			Meanwhile the SMSc will generate both final and intermediate delivery reports.
			These are routed back from Bearerbox to OpenSMPPbox, which are then
			rewritten, as to appear that they originated from OpenSMPPBox. These
			are finally routed back to the requesting ESME.
		</para>
		<para>
			OpenSMPPBox presents a layer of abstraction to the ESME. The ESME
			doesn't know the real SMScs used for SMS delivery. As far as it
			is concerned, it is dealing only with a single SMSc, OpenSMPPBox. OpenSMPPBox
      works like a black box in between your subscribers and Kannel.
		</para>
	</sect1>

	<sect1>
		<title>Features</title>
    <para>
      OpenSMPPBox provides for compliance to SMPP v3.3, SMPP v3.4 &amp; SMPPv5.0 for
			MT SMS routing over GSM. Options are limited by the features
			provided by Bearerbox.
		</para>
    
    <para>
      SMPP Users are defined in a flat text file, which is parsed at client
      connection (binding) time. This means that users can be added, changed or
      removed without restarting opensmppbox. The file can be edited by any plain-text
      file editor. Also it is possible to compile opensmppbox with Unix PAM support
      (pluggable authentication modules). See the corresponding options in the configuration
      file.
    </para>

    <para>
      It is possible to restrict ip addresses from which can be bound (connected)
      per user. See the section on configuring opensmppbox below.
    </para>

    <para>
      Special efforts have been made to make opensmppbox v3.4 compatible by means of TLV
      (tagged length value) parameters. These parameters can be addressed via the meta-data
      construction in Kannel. A special example of this: One can conditionally enable transmission
      of short messages as a whole with length exceeding 140 octets, based on a meta-tag
      "use_message_payload" in "smpp" group. In case this tag has been set and its value is not zero,
      opensmppbox will attempt to use the "message_payload" TLV instead of splitting the message
      into multiple shorter ones with UDH-concatenation bit set. Note that this mechanism only
      works for ESME's that declare support for SMPP versions 3.4 or greater. A simple usage example:
      <ulink url="">http://localhost:13013/cgi-bin/sendsms?...&amp;meta-data=%3Fsmpp%3Fuse_message_payload%3D1</ulink>.
    </para>
  </sect1>

  <sect1>
    <title>Limitations</title>
    <para>
      Some SMPP methods, for instance querying or cancelling short messages are
      not available.
    </para>
    <para>
      Billing and logging features are inherited from Kannel, which lacks a great
      deal of these things. As such, pre-paid billing accounts are not part of the
      implementation. For post-paid billing, you will need to parse the log-files
      or possibly use message logging by means of sqlbox.
    </para>
  </sect1>

    <sect1>
		<title>Requirements</title>
		<para>
      Latest Kannel must be installed (>1.4.3 svn version), including development
      headers and libraries. Kannel's gwlib is needed for compilation.
      Additionally a working (running) Bearerbox is needed to route SMS to.
      If it is not available, SMS messages can possibly be lost and no more
      logins are permitted.
    </para>
    <para>
      A C compiler and libraries for ANSI C are needed, with normal
      Unix extensions such as BSD sockets and related tools. (GNU's GCC
      tool-chain is recommended)
    </para>
    <para>
      To build this documentation, the docbook c.s. tools are needed.
    </para>
    </sect1>
</chapter>

<chapter>
	<title>Installation</title>
	<para>
		This chapter explains how the gateway can be installed,
		either from a source code package or by using a pre-compiled
		binary version. The goal of this chapter is to get the gateway
		compiled and all the files in the correct places; the next
		chapter will explain how the gateway is configured.
	</para>

	<note>
		<para>
			If you are upgrading from a previous version, please look at
			<xref linkend="upgrading-notes"> for any important information.
			See chapter 5.
		</para>
	</note>

	<sect1>
		<title>Getting the source code</title>
		<para>
			The source code is available from Kannel's site, through svn:
		</para>
		<para>
			<emphasis>svn co https://svn.kannel.org/opensmppbox/trunk</emphasis>
		</para>
		<para>
			Authentication is not needed.
		</para>
	</sect1>

	<sect1>
		<title>Finding the documentation</title>

		<para>OpenSMPPBox documentation consists of two parts:
			<orderedlist>
				<listitem><para><citetitle>User's Guide</citetitle>, namely the one
					you're reading at the moment.</para></listitem>
				<listitem><para>The <filename>README</filename>, <filename>ChangeLog</filename>
        and various other text files in the source tree.</para></listitem>
				</orderedlist>
		</para>
		
		<para>You can also find general information on Kannel's
			<ulink url="http://www.kannel.org">website</ulink> and
			information about existing problems at 
			<ulink url="http://bugs.kannel.org">our bug tracker</ulink>.
		</para>

		<para>
			Everything you need to install and use OpenSMPPBox is in <citetitle>User's Guide.</citetitle>
			The guide is still incomplete in this respect. The <filename>README</filename> is not
			supposed to be very important, nor contain much information. Instead,
			it will just point to the other documentation.
		</para>
		
	</sect1>

	<sect1>
		<title>Compiling the proxy</title>

		<para>If you are using OpenSMPPBox on a supported platform, or one
			that is similar enough to one, compiling opensmppbox should be trivial.
			After you have unpacked the source package of your choice,
			or after you have checked out the source code from SVN, enter
			the following commands:

			<screen><userinput>
				./configure
				make
			</userinput></screen>

			The <filename>configure</filename> script investigates various
			things on your computer compilation needs, and writes out the
			<filename>Makefile</filename> used to compile OpenSMPPBox.
			<command>make</command> then runs the commands to actually
			compile it. It generates the <filename>configure.log</filename>,
			of all actions taken, usually the first step in debugging in case
			of errors.
		</para>

                <para> It is pssoble, when you load a new version of opensmppbox, that 
                       you must do - before previous commands - following

                       <screen><userinput>
                                automake
                                autoconf
                        </userinput></screen>

                        These will allow compiling of added source files.                      
                </para>

                <para>
                        If you want to store DLRs to a database, you must configure 
                        opensamppbox to support this database. E.g., if your dabase
                        is mysql, use <literal>--with-mysql</literal>option, or if 
                        you mysqlclient library is stored in an unusal place, 
                        <literal>--with-mysql-dir=DIR</literal>. If you 
                        want to use PAM authentication, use <literal>--enable-pam
                        </literal>.
                </para>

                <para>
                        <literal>./configure --help</literal> will display full list of
                        configuration options.
                </para>
		<para>
			If either command writes out an error message and stops
			before it finishes its job, you have a problem, and you either
			need to fix it yourself, if you can, or report the
			problem to the Kannel project. See <xref linkend="bug-reporting">
			for details.
		</para>
		
		<para>
			For detailed instructions on using the configuration
			script, see file <filename>INSTALL</filename>. That file is
			a generic documentation for <command>configure</command>.
		</para>
		<para>
			You may need to add compilations flags to configure:

			<screen><userinput>
			CFLAGS='-pthread' ./configure
			</userinput></screen>

			The above, for instance, seems to be required on FreeBSD. If you
			want to do development, you probably want to add CFLAGS that make
			your compiler print warning messages. For example, for GCC:

			<screen><userinput>
				CFLAGS='-Wall -g' ./configure
			</userinput></screen>

			(You may, at your preference, use even stricter checking options.)
		</para>
	</sect1>
	<sect1>
		<title>Installing the proxy</title>

		<para>
			After you have compiled OpenSMPPBox, you need to install
			certain programs in a suitable place. This is most easily
			done by using <command>make</command> again:

			<screen><userinput>
				make bindir=<replaceable>/path/to/directory</replaceable> install
			</userinput></screen>

			Replace <replaceable>/path/to/directory</replaceable> with the
			pathname of the actual directory where the programs should be
			installed.
      Actually only a single program is installed <filename>opensmppbox</filename>.
      
      The user that runs make install needs to have write permissions
      do the bindir directory. It defaults to <filename>/usr/local/sbin</filename>.
      So possibly you need to be root to be able to install.  
			The version number of the proxy is added to the file
			during installation. This makes it easier to have several
			versions installed, and makes it easy to go back to an older
			version if the new version proves problematic.
		</para>
		<para>
			After installation, you should now be able to run the Kannel init.d
			script that will start the proxy. Run the script as root.
			For opensmppbox we don't have a seperate init script, but versions of the
			Kannel init script are available that include starting opensmppbox.
		</para>

		<screen><userinput>
			/etc/init.d/kannel start
		</userinput></screen>

		<para>
			To stop the gateway just run the same script with the
			stop parameter.
		</para>

		<screen><userinput>
			/etc/init.d/kannel stop
		</userinput></screen>
		
		<para>
			If OpenSMPPBox is already running and you just want to quickly
			stop and start the gateway,e.g.to set a new configuration option,
			run the script with the restart parameter.
		</para>

		<screen><userinput>
			/etc/init.d/kannel restart
		</userinput></screen>
	</sect1>
</chapter>

<chapter>
	<title>Using OpenSMPPBox</title>

	<para>
		This chapter explains how the proxy, OpenSMPPBox, is configured and used.
		It covers the configuration file and proxy administration during runtime.
	</para>
	<para>
		There is only one configuration file for all parts of OpenSMPPBox. If
		several proxy instances are distributed among different hosts, each one
		needs to have its own configuration file, with its own options.
	</para>
  <para>
    In bearerbox's status page you can see all connected opensmppbox clients as different smsboxes.
    Note that the ip address that is listed on the status page of bearerbox is the one of opensmppbox;
    not the client ip address of the opensmppbox user.
  </para>

	<sect1>
		<title>Configuring the proxy</title>
		<sect2>
			<title>Configuration file syntax</title>

			<para>
				A configuration file consists of groups of configuration
				variables. Groups are separated by empty lines, and each variable
				is defined on its own line. Each group in Kannel configuration is
				distinguished with a group variable. Comments are lines that begin
				with a number sign (<literal>#</literal>) and are ignored (they
				don't, for example, separate groups of variables).
			</para>

			<para>
				A variable definition line has the name of the variable,
				and equals sign (<literal>=</literal>) and the value of the
				variable. The name of the variable can contain any characters
				except white space and equals. The value of the variable is a
				string, with or without quotation marks (<literal>&quot;</literal>)
				around it. Quotation marks are needed if the variable needs to
				begin or end with white space or contain special
				characters. Normal C escape character syntax works inside 
				quotation marks.
			</para>

			<para>Perhaps an example will make things easier to comprehend:

				<programlisting>
1    # Proxy configuration
2    group = opensmppbox
3    box-dlr-storage = mysql
4    box-msg-id = id
5    bearerbox-host = 127.0.0.1
6    bearerbox-port = 13000
7    opensmppbox-id = smppbox1
8    opensmppbox-port = 13001
9    log-file = /var/log/kannel/opensmppbox.log
10   log-level = 0
11   our-system-id = Inaccess
12   route-to-smsc = fast_smsc
13   # New accounts
14   smpp-logins = /etc/opensmppbox/clients
				</programlisting>
			</para>

			<para>
				Lines 1 and 13 are comment lines. A blank line is needed to
				separate groups. The remaining lines define variables. The
				group type is defined by the group variable value.
			</para>
			
			<para>
				The variables used in each configuration group are explained below:
			</para>

			<para>
				Some variable values are marked as <literal>'bool'</literal>.
				The value for such a variable is true, false, yes, no, on, off, 0
				or 1. Arbitrary values are treated as 'true' while if the
				variable is missing, it is treated as being 'false'.
			</para>

			<para>
				In order to make some configuration lines more readable you may
				use the delimiter '\' at the end of a line to wrap and concatenate
				the next line up to the current line. Here is an example:

				<programlisting>
1    # A group with a wrapped alias line
2    group = dummy
3    anything = hello
4    aliases = hallo;haalloo;\
5      heelloo;haelloo;healloo
6    whatever = "Hello world!"
				</programlisting>

				The above example shows how a list for various alias keywords
				is wrapped to two lines using the line wrap delimiter. In order
				to use the delimiter '\' itself, you need to escape it via a
				prefixed '\' itself. So this is '\\' to escape the wrapping
				function and use the character in the string.
			</para>
		</sect2>

		<sect2 id="includes">
			<title id="includes.title">Inclusion of configuration files</title>

			<para>
				A configuration file may contain a special directive 
				called <literal>include</literal> to include other 
				file or a directory with files to the configuration 
				processing.
			</para>
		 
			<para>
				This allows to segment the specific configuration groups
				required for several services and boxes to different files and
				hence to have more control in larger setups.
			</para>

			<para>
				Here is an example that illustrates the <literal>include</literal>
				statement :

				<programlisting>
# OpenSMPPBox configuration

include = "/etc/opensmppbox/conf/opensmppbox1.conf"
				</programlisting>

				Above is the main <literal>opensmppbox.conf</literal> configuration
				file that includes the following <literal>opensmppbox1.conf</literal>
				file with all required directives for the specific box, and a
				<literal>configurations</literal> directory which may include
				more files to include.

				<programlisting>
# opensmppbox1.conf

group = opensmppbox
box-dlr-storage e mysql
box-msg-id = id
bearerbox-host = 127.0.0.1
bearerbox-port = 13002
opensmppbox-id = Dutch
opensmppbox-port = 13003
log-file = "/var/log/kannel/opensmppbox.log"
log-level = 1
our-system-id = Inaccess
route-to-smsc = cardboard
smpp-logins = /etc/opensmppbox/clients
				</programlisting>


				The above <literal>include</literal> statement may be defined
				at any point in the configuration file and at any inclusion 
				depth. Hence you can cascade numerous inclusions if necessary.
				It must be, however, between groups and must contain whole group
				definitions.
			</para>

			<para>
				At process start time inclusion of configuration files
				breaks if either the included file can not be opened and
				processed or the included file has been processed already in
				the stack and a recursive loop has been detected.
			</para>

		</sect2>

		<sect2>
			<title>OpenSMPPBox configuration</title>
                        <sect3>
                        <title>Configuring OpenSMPPBox  core group</title>

                         <para>
				OpenSMPPBox configuration <emphasis>MUST</emphasis> always
				include a group for general proxy configuration. This group is
				named as 'opensmppbox' in configuration file. It doesn't matter if
				this is the first or a later group in the configuration file.
			</para>

			<para>In it's simplest form, 'opensmppbox' group looks like this:

				<programlisting>
group = opensmppbox
our-system-id = Inaccess
smpp-logins = /etc/opensmppbox/clients
				</programlisting>

				Naturally this is not sufficient for any real use. Thus, one or
				more of the optional configuration variables are used. In following
				list (as in any other similar lists), all mandatory variables are
				marked with <literal>(m)</literal>, while conditionally mandatory
				(variables which must be set in certain cases) are marked with
				<literal>(c)</literal>.
			</para>

			<table frame="none">
				<title>opensmppbox Group Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Variable</entry>
              <entry>Value</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>group (m)</literal>
              </entry>
              <entry>
                <literal>opensmppbox</literal>
              </entry>
              <entry valign="top">This is a mandatory variable</entry>
            </row>
            <row>
            <entry> <literal>box-dlr-storage</literal>
            </entry>
            <entry> <literal>string</literal>
            </entry>
            <entry valign="top">
            Opensmppbox needs message ids of stored messagea, so it
            has its own DLR storage. Variable defines type of database,
            or lack of it. E.g., id you have build-in external DLR storage 
            support, i.e. using MySQL you may define here the alternative 
            storage type like <literal>mysql</literal>.
            Supported types are:
            <literal>internal</literal>,
            <literal>mysql</literal>,
            <literal>pgsql</literal>,
            <literal>sdb</literal>,
            <literal>mssql</literal>,
            <literal>sqlite3</literal> and 
            <literal>oracle</literal>.
            By default this is set to <literal>internal</literal>.
            This means that DLRs are not stored to hard disk at all.
            </entry></row>
            <row>
            <entry><literal>box-msg-id</literal>
            </entry>
            <entry><literal>string</literal>
            </entry>
            <entry valign="top">
            The table field that opensmppbox uses to store the message id
            of SM to delivered. This is required to guarantee that DLR messages 
            are routed back to the client that sent the original message. This 
            is done via the smppbox client routing.
            </entry>
            </row>
            <row>
              <entry>
                <literal>bearerbox-host (o)</literal>
              </entry>
              <entry>
                <literal>hostname</literal>
              </entry>
              <entry valign="top">
                Bearerbox server. FQDN or IP address. Defaults to
                localhost.
              </entry>
            </row>
            <row>
              <entry>
                <literal>bearerbox-port (o)</literal>
              </entry>
              <entry>
                <literal>port number</literal>
              </entry>
              <entry valign="top">
                TCP port that bearerbox is listening for incoming
                opensmppbox connections. Should be the same as smsbox-port
                configured in bearerbox. Defaults to 13001.
              </entry>
            </row>
            <row>
              <entry>
                <literal>opensmppbox-id (o)</literal>
              </entry>
              <entry>
                <literal>string</literal>
              </entry>
              <entry valign="top">
                Optional opensmppbox instance identifier. This is used for logging identification,
                and as opensmppbox box id, if usesmppboxid is set
              </entry>
            </row>
            <row>
            <entry>
              <literal> use-smppboxid (o) </literal>
            </entry>
            <entry>
              <literal> Boolean </literal>
            </entry>
            <entry valign = "top">
                If this flag is set, openamppbox will make only one connection to bearwrbox, and
                use opensmppbox-id as its box id. If this flag is not set, every client will 
                have a separate connection instead. Not that if you use this flag, you must set
                use-systemid-as-smsboxid flag, too.
            </entry>            
            </row>
            <row>
              <entry>
                <literal>opensmppbox-port (o)</literal>
              </entry>
              <entry>
                <literal>port number</literal>
              </entry>
              <entry valign="top">
                TCP port that opensmppbox is listening for incoming ESME
                connections. Defaults to 2345. If you want a different port 
                number for each client, you will need to run a separate opensmppbox 
                instance for each port you are listening on.
              </entry>
            </row>
            <row>
              <entry>
                <literal>log-file (o)</literal>
              </entry>
              <entry>
                <literal>filename</literal>
              </entry>
              <entry valign="top">
                Filename that opensmppbox will log messages. If missing,
                logging is disabled.
              </entry>
            </row>
            <row>
              <entry>
                <literal>log-level (o)</literal>
              </entry>
              <entry>
                <literal>integer (0...5)</literal>
              </entry>
              <entry valign="top">
                Logging level. From maximum (0) to minimum (4).
                Defaults to 0.
              </entry>
            </row>
            <row>
              <entry>
                <literal>our-system-id (m)</literal>
              </entry>
              <entry>
                <literal>string</literal>
              </entry>
              <entry valign="top">
                Corresponds to SMSC identification transmitted to connected
                ESMEs.
              </entry>
            </row>
            <row>
              <entry>
                <literal>route-to-smsc (o)</literal>
              </entry>
              <entry>
                <literal>string</literal>
              </entry>
              <entry valign="top">
                Corresponds to smsc-id defined in bearerbox. If set, it
                will send SMS through this SMSc, else it will let
                bearerbox route the SMS. Defaults to bearerbox routing.
              </entry>
            </row>
            <row>
              <entry>
                <literal>smpp-logins (m)</literal>
              </entry>
              <entry>
                <literal>filename</literal>
              </entry>
              <entry valign="top">
                File that contains authentication credentials for clients
                connecting to opensmppbox. This should be a file with a single
                line per client, with username, password and system-type,
                seperated by spaces. System-type is a special value. In
                practice, you should have a different system-type for each
                connecting client. See description of smpplogins.txt below.
              </entry>
            </row>
            <row>
              <entry>
                <literal>use-systemid-as-smsboxid (o)</literal>
              </entry>
              <entry>
                <literal>boolean</literal>
              </entry>
              <entry valign="top">
		If set to true, this opensmppbox user is authenticating as smsbox
		to bearerbox as the system-id value (first parameter in
		smpplogins.txt). If set to false (which is the default) then
		the smsbox-id is the same as system-type (third parameter in
		smpplogins.txt). If you are using PAM authentication, then
		use-systemid-as-smsboxid must be set to true.
              </entry>
            </row>
            <row>
              <entry>
                <literal>enable-pam (o)</literal>
              </entry>
              <entry>
                <literal>boolean</literal>
              </entry>
              <entry valign="top">
		If set to true, then open smpp will use PAM authentication
		besides the usual smpplogins.txt file. The smpplogins.txt
		file takes precedence here. If there the user cannot be
		found there, opensmppbox will try to use PAM authentication.
		use-systemid-as-smsboxid must be set to true if enable-pam
		is also true. For this to work, opensmppbox must be compiled
		with pam-support (configure --enable-pam).
              </entry>
            </row>
            <row>
              <entry>
                <literal>pam-acl (o)</literal>
              </entry>
              <entry>
                <literal>pam acl account</literal>
              </entry>
              <entry valign="top">
		If enable-pam is true, authentication is done against
		this pam account. It must be present in /etc/pam.d.
		If not given, then the value "kannel" is used.
              </entry>
            </row>
    <row><entry><literal>source-addr-ton (o)</literal></entry>
      <entry><literal>number</literal></entry>
      <entry valign="top">
      Manually override source address TON setting for the link.
		(Defaults to -1, do not override).
     </entry></row>

    <row><entry><literal>source-addr-npi (o)</literal></entry>
      <entry><literal>number</literal></entry>
      <entry valign="top">
      Manually override source address NPI setting for the link.
		(Defaults to -1, do not override).
     </entry></row>

    <row><entry><literal>source-addr-autodetect (o)</literal></entry>
      <entry><literal>boolean</literal></entry>
      <entry valign="top">
		If defined tries to scan the source address and 
		set TON and NPI settings accordingly.
		(Defaults to no).
     </entry></row>

    <row><entry><literal>dest-addr-ton (o)</literal></entry>
      <entry><literal>number</literal></entry>
      <entry valign="top">
      Manually override destination address TON setting for the link.
		(Defaults to -1, do not override).
     </entry></row>

    <row><entry><literal>dest-addr-npi (o)</literal></entry>
      <entry><literal>number</literal></entry>
      <entry valign="top">
      Manually override destination address NPI setting for the link.
		(Defaults to -1, do not override).
     </entry></row>

    <row><entry><literal>timeout (o)</literal></entry>
      <entry><literal>number</literal></entry>
      <entry valign="top">
      The smpp connection gets dropped if opensmppbox does not
      receive a valid pdu in this number of seconds.
		(Defaults to 300).
     </entry></row></tbody></tgroup>
     </table>
     </sect3>

    <sect3>
    <title>Configuring routing of MOs</title>
    <para>
    If usesmppbox-id variable is used, you probably want to configure
    one or more client-route group. It instructs opensmppbox to route 
    certain MOs to a specific client. If this group is missing, a random 
    client is picked instead. If both shortcode and and client-id variable is 
    supplied, this is interpreted as logical AND: only messages 
    addressed to the specifed shortcode and coming from specified 
    smsc are routed to client in question.
    </para>

    <table frame="none">
                                <title>client-route Group Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Variable</entry>
              <entry>Value</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
    <row><entry><literal>group (o) </literal></entry>
      <entry><literal>client-route</literal></entry>
      <entry valign="top">
      Optional. Configure this if you se use-smppboxid variable 
      and want MOs routed to a certain client
      </entry></row> 

    <row><entry><literal>client-id</literal></entry>
      <entry><literal>string</literal></entry>
      <entry valign="top">
      System id of the client the messages should be routed. Use
      variable use-systemid-as-smsboxid to allow routing. 
      </entry></row>

    <row><entry><literal>shortcode</literal></entry>
      <entry><literal>list of numbers separated by semicolons</literal></entry>
      <entry valign="top">
      If set, specifies which receiver numbers for inbound messages 
      should be routed to this client. This rule may be used to pull 
      receiver number specific message streams to a client. 
      </entry></row>

    <row><entry><literal>smsc-id</literal></entry>
      <entry><literal>list of strings separated by semicolons</literal></entry>
      <entry valign="top">
      If set, specifies from which smsc-ids all inbound messages should be routed 
      to this client. This rule may be used to pull any smsc specific message 
      stream to a client.
      </entry></row>
          </tbody>
        </tgroup>
      </table>
      </sect3>

      <sect3>
      <title>Configuring external DLR storage</title>
      <para>
       You probable want to use database to store DLRs, even if storage is only 
       temporay (DLRs will be removed from storage after successful delivery, but 
       opensmppbox could crash or  down orderly before this happens).
       To do ths, you must configure <literal>dlr-db</literal> and database connection
       groups. There are a separate group for every database type. If none external
       database id defined, DLRs are stored in memeory
      </para>

       <sect4>
        <title>Internal DLR storage</title>

   <para>This is the default way in handling DLRs and does not
        require any special configuration. In order to configure bearerbox
        to use internal DLR storage use <literal>dlr-storage = internal</literal>
        in the <literal>core</literal> group and <literal>box-dlr-storage = 
        internal</literal>.
        </para>
   </sect4>

   <sect4>
        <title>MySQL DLR storage</title>
        <para>To store DLR information into a MySQL database you may use the
        <literal>dlr-storage = mysql</literal> configuration directive in the
        <literal>core</literal> group and <literal>box-dlr-storage =
        internal</literal> in the <literal>opensmppbox</literal> group..
        </para>
        <para>In addition to that you must have a <literal>dlr-db</literal>
        group defined that specifies the table field names that are used to the
        DLR attributes and a <literal>mysql-connection</literal> group that
        defines the connection to the MySQL server itself.
        </para>
        <para>Here is the example configuration from:

<programlisting>
group = mysql-connection
id = mydlr
host = localhost
username = foo
password = bar
database = dlr
max-connections = 1      

group = dlr-db
id = mydlr
table = dlr
field-smsc = smsc
field-timestamp = ts
field-destination = destination
field-source = source
field-service = service
field-url = url
field-mask = mask
field-status = status
field-boxc-id = boxc
</programlisting>

        </para>

        <para>MySQL database connection is configured as follows:</para>

         <table frame="none">
  <title>MySQL Connection Group Variables</title>
  <tgroup cols="3">
  <thead>
   <row>
     <entry>Variable</entry>
     <entry>Value</entry>
     <entry>Description</entry>
   </row>
  </thead>
  <tbody>
   <row><entry><literal>group</literal></entry>
     <entry><literal>mysql-connection</literal></entry>
     <entry valign="top">
       Th0is is a mandatory variable
     </entry></row>

   <row><entry><literal>id (m)</literal></entry>
     <entry><literal>string</literal></entry>
     <entry valign="top">
             An optional name or id to identify this MySQL connection
                  for internal reference with other MySQL related configuration
                  groups. Any string is acceptable, but semicolon ';' may cause
                  problems, so avoid it and any other special non-alphabet characters.
     </entry></row>
     
     <row><entry><literal>host (m)</literal></entry>
     <entry>hostname or IP</entry>
     <entry valign="bottom">
        Hostname or IP of a server running a MySQL database to connect to.
     </entry></row>

    <row><entry><literal>username (m)</literal></entry>
     <entry>username</entry>
     <entry valign="bottom">
        User name for connecting to MySQL database.
     </entry></row>

      <row><entry><literal>password (m)</literal></entry>
     <entry>password</entry>
     <entry valign="bottom">
        Password for connecting to MySQL database.
     </entry></row>

    <row><entry><literal>database (m)</literal></entry>
     <entry>string</entry>
     <entry valign="bottom">
        Name of database in MySQL database server to connect to.
     </entry></row>

        <row><entry><literal>max-connections</literal></entry>
     <entry>integer</entry>
     <entry valign="bottom">
        How many connections should be opened to the given database.
        This is used for database pool.
     </entry></row>

  </tbody>
  </tgroup>
 </table>

  <para>A sample 'mysql-connection' group:

<programlisting>
group = mysql-connection
id = dlr-db
host = localhost
username = foo
password = bar
database = dlr
max-connections = 1
</programlisting>

 </para>
  </sect4>

  <sect4>
        <title>LibSDB DLR storage</title>
        <para>To store DLR information into a LibSDB resource (which is an
        abstraction of a real database) you may use the
        <literal>dlr-storage = sdb</literal> configuration directive in the
        <literal>core</literal> group and <literal>box-dlr-storage = sdb</literal> 
        configuration directive in the <literal>opensmppbox</literal> group.
        </para>
        <para>In addition to that you must have a <literal>dlr-db</literal>
        group defined that specifies the table field names that are used to the
        DLR attributes and a <literal>sdb-connection</literal> group that
        defines the LibSDB resource itself.
        </para>
        <para>Here is the example configuration using a PostgreSQL resource:

<programlisting>
group = sdb-connection
id = pgdlr
url = "postgres:host=localhost:db=myapp:port=1234"
max-connections = 1

id = pgdlr
table = dlr
field-smsc = smsc
field-timestamp = ts
field-destination = destination
field-source = source
field-service = service
field-url = url
field-mask = mask
field-status = status
field-boxc-id = boxc
</programlisting>

        </para>
  <para>Beware that you have the DB support build in your LibSDB
  installation when trying to use a specific DB type within the URL.
  </para>

        </sect4>
 
      <sect4>
      <title>Oracle 8i/9i DLR storage</title>
        <para>To store DLR information into a Oracle database you may use the
        <literal>dlr-storage = oracle</literal> configuration directive in the
        <literal>core</literal> group and <literal>box-dlr-storage = oracle</literal> 
        configuration directive in the <literal>opensmppbox</literal> group.
        </para>
        <para>In addition to that you must have a <literal>dlr-db</literal>
        group defined that specifies the table field names that are used to the
        DLR attributes and a <literal>oracle-connection</literal> group that
        defines the connection to the Oracle server itself.
        </para>
        <para>Here is the example configuration:

<programlisting>
group = oracle-connection
id = mydlr
username = foo
password = bar
tnsname = dlr
max-connections = 1

id = mydlr
table = dlr
field-smsc = smsc
field-timestamp = ts
field-destination = destination
field-source = source
field-service = service
field-url = url
field-mask = mask
field-status = status
field-boxc-id = boxc
</programlisting>

        </para>

        </sect4>

        <sect4>
        <title>PostgreSQL DLR storage</title>
        <para>To store DLR information into a PostgreSQL database you may use the
        <literal>dlr-storage = pgsql</literal> configuration directive in the
        <literal>core</literal> group and <literal>box-dlr-storage = pgsql</literal> 
        configuration directive in the <literal>opensmppbox</literal> group.
        </para>
        <para>In addition to that you must have a <literal>dlr-db</literal>
        group defined that specifies the table field names that are used to the
        DLR attributes and a <literal>pgsql-connection</literal> group that
        defines the connection to the PostgreSQL server itself.
        </para>
        <para>Here is the example configuration:

<programlisting>
group = pgsql-connection
id = mydlr
host = myhost.com
username = foo
password = bar
database = dlr
max-connections = 1

group = dlr-db
id = mydlr
table = dlr
field-smsc = smsc
field-timestamp = ts
field-destination = destination
field-source = source
field-service = service
field-url = url
field-mask = mask
field-status = status
field-boxc-id = boxc
</programlisting>

        </para>
      </sect4>
      <sect4>
      <title>MS-SQL/Sybase DLR storage</title>
    <para>To store DLR information into a MS-SQL or Sybase (via FreeTDS)
    database you may use the <literal>dlr-storage = mssql</literal>
    configuration directive in the <literal>core</literal> group and 
    <literal>box-dlr-storage = mssql</literal> configuration directive in 
    the <literal>opensmppbox</literal> group.
    </para>
    <para>In addition to that you must have a <literal>dlr-db</literal>
    group defined that specifies the table field names that are used to the
    DLR attributes and a <literal>mssql-connection</literal> group that
    defines the connection to the MS-SQL or Sybase server itself.
    </para>
    <para>Please note that the <literal>server</literal> configuration directive
    must match the corresponding <literal>[section]</literal> on
    <literal>freetds.conf</literal></para>
    <para>Here is the example configuration:

<programlisting>
group = mssql-connection
id = msdlr
server = myservername
username = foo
password = bar
database = dlr
max-connections = 1

group = dlr-db
id = msdlr
table = dlr
field-smsc = smsc
field-timestamp = ts
field-destination = destination
field-source = source
field-service = service
field-url = url
field-mask = mask
field-status = status
field-boxc-id = boxc
</programlisting>

    </para>

    </sect4>

        <sect4>
        <title>SQLite3 DLR storage</title>
        <para>To store DLR information into a SQLite3 database you may use the
        <literal>dlr-storage = sqlite3</literal> configuration directive in the
        <literal>core</literal> group and <literal>box-dlr-storage = sqlite3</literal> 
        configuration directive in the <literal>opensmppbox</literal> group.
        </para>
        <para>In addition to that you must have a <literal>dlr-db</literal>
        group defined that specifies the table field names that are used to the
        DLR attributes and a <literal>sqlite3-connection</literal> group that
        defines the connection to the SQLite3 database itself.
        </para>
        <para>Here is the example configuration:

<programlisting>
group = sqlite3-connection
id = mydlr
database = /path/to/file
max-connections = 1

group = dlr-db
id = mydlr
table = dlr
field-smsc = smsc
field-timestamp = ts
field-destination = destination
field-source = source
field-service = service
field-url = url
field-mask = mask
field-status = status
field-boxc-id = boxc
</programlisting>
      
        </para>

        </sect4>
      </sect3>

      <sect3>
         <title>DLR database field configuration</title>
        <para>For external database storage of DLR information in relational
        database management systems (RDBMS) you will have to specify which table
        field are used to represent the stored data. This is done via the
        <literal>dlr-db</literal> group as follows:
        </para>

         <table frame="none">
  <title>DLR Database Field Configuration Group Variables</title>
  <tgroup cols="3">
  <thead>
   <row>
     <entry>Variable</entry>
     <entry>Value</entry>
     <entry>Description</entry>
   </row>
  </thead>
  <tbody>
   <row><entry><literal>group</literal></entry>
     <entry><literal>dlr-db</literal></entry>
     <entry valign="top">
       This is a mandatory variable
     </entry></row>

      <row><entry><literal>id (m)</literal></entry>
     <entry><literal>string</literal></entry>
     <entry valign="top">
             An id to identify which external connection should be used for
                  DLR storage. Any string is acceptable, but semicolon ';' may cause
                  problems, so avoid it and any other special non-alphabet characters.
     </entry></row>

   <row><entry><literal>table (m)</literal></entry>
     <entry>string</entry>
     <entry valign="top">
        The name of the table that is used to store the DLR information.
     </entry></row>

       <row><entry><literal>field-smsc (m)</literal></entry>
     <entry>string</entry>
     <entry valign="top">
        The table field that is used for the smsc data.
     </entry></row>

   <row><entry><literal>field-timestamp (m)</literal></entry>
     <entry>string</entry>
     <entry valign="top">
        The table field that is used for the timestamp data.
     </entry></row>

   <row><entry><literal>field-destination (m)</literal></entry>
     <entry>string</entry>
     <entry valign="top">
        The table field that is used for the destination number data.
     </entry></row>

     <row><entry>string</entry>
     <entry valign="top">
        The table field that is used for the source number data.
     </entry></row>

   <row><entry><literal>field-service (m)</literal></entry>
     <entry>string</entry>
     <entry valign="top">
        The table field that is used for the service username data.
     </entry></row>

      <row><entry><literal>field-url (m)</literal></entry>
     <entry>string</entry>
     <entry valign="bottom">
        The table field that is used for the DLR URL which is triggered
                  when the DLR for this message arrives from the SMSC.
     </entry></row>

   <row><entry><literal>field-mask (m)</literal></entry>
     <entry>string</entry>
     <entry valign="top">
        The table field that is used for the DLR mask that has been set
                  for a message.
     </entry></row>

      <row><entry><literal>field-status (m)</literal></entry>
     <entry>string</entry>
     <entry valign="top">
        The table field that is used to reflect the status of the DLR
                  for a specific message.
     </entry></row>

   <row><entry><literal>field-boxc-id (m)</literal></entry>
     <entry>string</entry>
     <entry valign="top">
        The table field that is used to store the smsbox connection id
                  that has passed the message for delivery. This is required in
                  cases you want to guarantee that DLR messages are routed back to
                  the same smsbox conn instance. This is done via the smsbox routing.
                  If you don't use smsbox routing simply add this field to your
                  database table and keep it empty.
     </entry></row>

  </tbody>
  </tgroup>
 </table>
     <para> Here is an example configuration group
<programlisting>
group = dlr-db
id = dlr-db
table = dlr
field-smsc = smsc
field-timestamp = ts
field-source = source
field-destination = destination
field-service = service
field-url = url
field-mask = mask
field-status = status
field-boxc-id = boxc
</programlisting>

  </para>
  <para>Beware that all variables in this group are mandatory, so you
  have to specify all fields to enable bearerbox to know how to store
  and retrieve the DLR information from the external storage spaces.
  </para>
 </sect3>
 </sect2>
 <sect2>
      <title>smpp logins</title>

      <para>
        The smpplogins.txt file, as set by the smpp-logins configuration
        variable defines all users that are able to bind as ESME to opensmppbox.
        The first three tokens of this file are the username, password and
        foreign system-type that form the credentials on which the bind-
        method of the ESME are being matched with. The last token and defines a
	source ip address to restrict logins to.
        An example with two example logins:

        <programlisting>
          goodclient    secret  remote	*.*.*.*
          franchise ourpassword localbox  127.0.0.1;213.110.120.33
        </programlisting>        
      </para>
      <para>
        The first line defines a username ("goodclient"), a password ("secret")
        and an smsbox-id ("remote"). People can log into this account, originating
	from any ip address.i The second line defines also a username
        ("franchise"), password("ourpassword") and an smsbox-id ("localbox"),
        but besides that there is a restriction on that user. It can only bind
        from the ip addresses 127.0.0.1 and 213.110.120.33.
        If ip address(es) is/are given, then only those ip addresses are allowed to connect.
        It works exactly like connect-allow-ip and connect-deny-ip in Kannel.conf.
        In that case, connect-deny-ip has a mask of "*.*.*.*".
      </para>

      <para>
        The third token in de smpp-logins file is the foreign system-type and is
        important in terms of Kannel's sms routing rules.
        It is used as smsbox-id when connecting to bearerbox.
        This means that messages sent via that system-type will get corresponding
        dlr's back. This also counts for MO messages.
        Also group = smsbox-route in Kannel.conf "listens" to this value.
        For this reason, it is important to use a different system-type for each
        different client unless they should receive each others' messages.

	In case use-systemid-as-smsboxid = true, then in stead of system-type,
	system-id will be used as this "smsbox-id" value. You are encouraged to
	use this feature and set it to true.
      </para>
    </sect2>
	</sect1>
</chapter>
<chapter id="bug-reporting">
	<title>Getting help and reporting bugs</title>
	<para>
	    This chapter explains where to find help with problems related to the gateway, and the preferred procedure for reporting bugs and sending corrections to them.
	</para>
	<para>
	    The Kannel development mailing list is users@kannel.org. To subscribe, send mail to users-subscribe@kannel.org. This is currently the best location for asking help and reporting bugs. Please include configuration file and version number.
	</para>
</chapter>
<chapter id="upgrading-notes">
	<title>Upgrading notes</title>
	<para>
	    See the file <filename>UPGRADE</filename> in the source tree.
	</para>
</chapter>
</book>


